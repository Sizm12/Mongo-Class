# Definición de redes
networks:
  mongo_network:
    driver: bridge

# Definición de volúmenes para persistencia
volumes:
  mongodb_data:
  mongodb_config:

services:
  # Servicio principal de MongoDB
  mongodb:
    image: mongo:7.0
    container_name: mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME:-admin}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD:-admin123}
      MONGO_INITDB_DATABASE: ${MONGO_INITDB_DATABASE:-mydb}
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - mongodb_config:/data/configdb
      - ./init-mongo:/docker-entrypoint-initdb.d  # Para scripts de inicialización
    networks:
      - mongo_network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '${MONGODB_CPU_LIMIT:-2}'
          memory: ${MONGODB_MEMORY_LIMIT:-2G}
        reservations:
          cpus: '${MONGODB_CPU_RESERVATION:-1}'
          memory: ${MONGODB_MEMORY_RESERVATION:-1G}
    ulimits:
      nproc: 64000
      nofile:
        soft: 64000
        hard: 64000
    sysctls:
      - net.core.somaxconn=4096
      - net.ipv4.tcp_keepalive_time=300

  # MongoDB Express (Interfaz web)
  mongo-express:
    image: mongo-express:latest
    container_name: mongo-express
    restart: unless-stopped
    environment:
      ME_CONFIG_MONGODB_URL: mongodb://${MONGO_INITDB_ROOT_USERNAME:-admin}:${MONGO_INITDB_ROOT_PASSWORD:-admin123}@mongodb:27017/
      ME_CONFIG_BASICAUTH_USERNAME: ${ME_CONFIG_BASICAUTH_USERNAME:-admin}
      ME_CONFIG_BASICAUTH_PASSWORD: ${ME_CONFIG_BASICAUTH_PASSWORD:-admin123}
      ME_CONFIG_MONGODB_ADMINUSERNAME: ${MONGO_INITDB_ROOT_USERNAME:-admin}
      ME_CONFIG_MONGODB_ADMINPASSWORD: ${MONGO_INITDB_ROOT_PASSWORD:-admin123}
      ME_CONFIG_MONGODB_SERVER: mongodb
      NODE_ENV: production
    ports:
      - "${MONGODB_EXPRESS_PORT:-8081}:8081"
    depends_on:
      mongodb:
        condition: service_healthy
    networks:
      - mongo_network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.2'
          memory: 256M
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:8081"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # MongoDB Shell (mongosh) como servicio
  mongosh:
    image: mongo:7.0
    container_name: mongosh
    entrypoint: ["mongosh"]
    command: ["--username", "${MONGO_INITDB_ROOT_USERNAME:-admin}", "--password", "${MONGO_INITDB_ROOT_PASSWORD:-admin123}", "--host", "mongodb"]
    depends_on:
      mongodb:
        condition: service_healthy
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.2'
          memory: 256M
    networks:
      - mongo_network
    stdin_open: true
    tty: true

  # MongoDB Exporter para monitoreo (opcional)
  mongodb-exporter:
    image: bitnami/mongodb-exporter:latest
    container_name: mongodb-exporter
    environment:
      - MONGODB_URI=mongodb://${MONGO_INITDB_ROOT_USERNAME:-admin}:${MONGO_INITDB_ROOT_PASSWORD:-admin123}@mongodb:27017/admin
    ports:
      - "9216:9216"
    depends_on:
      mongodb:
        condition: service_healthy
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.2'
          memory: 256M
    networks:
      - mongo_network
